
[ ] How does vertex array object work?
    - Creating the vertex buffer is a way to create memory allocation on the GPU 
    - The vertex buffer object needs to have an associated vertex attribute pointer 
    - The VAO stores the state of VBO and attribute relationships. 

    1) VBO - store vertex data on the GPU
        glGenBuffers to get the buffer id
        glBindBuffer to make it the active buffer target
        glBufferData to copy user-defined data into the currently bound GPU buffer 
        * The VBO represents a copy of the vertex data on the GPU.
        * its corresponding VAPs 

    2) Tell the GPU how to process that vertex data using shaders 

    3) Describe how the vertex data is laid out to the GPU 
        - Vertex Attributes:
            - Vertex shader can specify any input through the use of a vertex attribute 
            - have to specify what part of the input data goes to what attribute 
            - i.e. in the vertex shader there is :
                layout(location = 0) in vec3 aPos;
            - Thus the corresponding attribute:
                glVertexAttribPointer(0,3,....)
                                      ^ ^ location zero, vec3 is the size (3)
                            
- Vertex Buffer Object Allocates memory on the GPU:
    1) create it using glGenBuffers(target, int&)
    2) Once its created it needs to be bound to a bind point. 
        a bind point tells OpenGL that this buffer is the current
        active one for subsequent operations.
        -> glBindBuffer(targetEnum, vbo)
    3) Copy the vertex buffer data into vertex buffer memory:
        -> glBufferData(target, sizeInBytes, buffer, DRAWTYPE)

- Vertex Shaders:
    1) have the shader source code somewhere.
    2) create the shader object:
        -> glCreateShader(shaderType) --> Fragment shader is similar except shader type here is dfifferent
    3) attach the source to the shader object:
        -> glShaderSource(vertexShaderObject, numElementsInStringArray, * to shader source, length opf something)
    4) compile the shader:
        -> glCompileShader(shader)

- Shader Program:
    Compiled shaders have to be linked toa shader program
    Shader program object is then activeated for rendering
    1) create the program:
        glCreateProgram();
    2) attach whatever shaders to the program   
        glAttachShader(which program, which shader)
    3) link the shaders
        glLinkProgram(shaderProgram)
    4) ** you can now use the shader with:**
        ----> glUseProgram(program);
    -> Once shaders have been linked to a program, the shaders themselves can be deleted:
        glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

Vertex Attributes:
 i.e. how does open gl know how to interpret the vertices data from the input array?
 